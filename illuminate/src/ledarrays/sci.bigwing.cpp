/*
  Copyright (c) 2021, Zack Phillips
  Copyright (c) 2018, Zachary Phillips (UC Berkeley)
  All rights reserved.

  BSD 3-Clause License

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:
      Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
      Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
      Neither the name of the UC Berkley nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL ZACHARY PHILLIPS (UC BERKELEY) BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA , OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// Define which LED Array is used
#include "../../illuminate.h"

#ifdef USE_SCI_BIG_WING_ARRAY
#include "../../ledarrayinterface.h"
#include "../TLC5955/TLC5955.h"

// Power monitoring commands
#define DEVICE_SUPPORTS_POWER_SENSING 0
#define DEVICE_SUPPORTS_ACTIVE_POWER_MONITORING 0
#define PSU_ACTIVE_MONITORING_COMPARATOR_MODE 5

#if DEVICE_SUPPORTS_ACTIVE_POWER_MONITORING
  #include "../TeensyComparator/TeensyComparator.h"
#endif

// Global shutter state
bool global_shutter_state = true;

// Pin definitions (used internally)
const int GSCLK = 6;
const int LAT = 3;
const int SPI_MOSI = 11;
const int SPI_CLK = 13;
const int TRIGGER_OUTPUT_PIN_0 = 23;
const int TRIGGER_INPUT_PIN_0 = 22;
const int TRIGGER_OUTPUT_PIN_1 = 20;
const int TRIGGER_INPUT_PIN_1 = 19;
const int TRIGGER_OUTPUT_COUNT = 2;
const int TRIGGER_INPUT_COUNT = 2;

// Power sensing pin
const int POWER_SENSE_PIN = -1;

// EEPROM Addresses
#define DEMO_MODE_ADDRESS 50
#define PN_ADDRESS 100
#define SN_ADDRESS 200

// Device and Software Descriptors
const char * LedArrayInterface::device_name = "Sci-Big-Wing";
const char * LedArrayInterface::device_hardware_revision = "1.0";
const int16_t LedArrayInterface::led_count = 1529;
const uint16_t LedArrayInterface::center_led = 0;
const int LedArrayInterface::trigger_output_count = 2;
const int LedArrayInterface::trigger_input_count = 2;
const int LedArrayInterface::color_channel_count = 3;
const char LedArrayInterface::color_channel_names[] = {'r', 'g', 'b'};
const float LedArrayInterface::color_channel_center_wavelengths_nm[] = {480.0, 525.0, 625.0};
const float LedArrayInterface::color_channel_fwhm_wavelengths_nm[] = {20.0, 20.0, 20.0};
const int LedArrayInterface::bit_depth = 16;
const bool LedArrayInterface::supports_fast_sequence = false;
const float LedArrayInterface::led_array_distance_z_default = 50.0;
int LedArrayInterface::debug = 0;
const int LedArrayInterface::trigger_output_pin_list[] = {TRIGGER_OUTPUT_PIN_0, TRIGGER_OUTPUT_PIN_1};
const int LedArrayInterface::trigger_input_pin_list[] = {TRIGGER_INPUT_PIN_0, TRIGGER_INPUT_PIN_1};
bool LedArrayInterface::trigger_input_state[] = {false, false};
float LedArrayInterface::led_position_list_na[LedArrayInterface::led_count][2];
const int LedArrayInterface::power_sense_pin = POWER_SENSE_PIN;

const uint8_t TLC5955::chip_count = 100;    // Change to reflect number of TLC chips
float TLC5955::max_current_amps = 10.0;      // Maximum current output, amps
bool TLC5955::enforce_max_current = true;   // Whether to enforce max current limit

// Define dot correction, pin rgb order, and grayscale data arrays in program memory
uint8_t TLC5955::_dc_data[TLC5955::chip_count][TLC5955::LEDS_PER_CHIP][TLC5955::COLOR_CHANNEL_COUNT];
uint8_t TLC5955::_rgb_order[TLC5955::chip_count][TLC5955::LEDS_PER_CHIP][TLC5955::COLOR_CHANNEL_COUNT];
uint16_t TLC5955::_grayscale_data[TLC5955::chip_count][TLC5955::LEDS_PER_CHIP][TLC5955::COLOR_CHANNEL_COUNT];

/**** Device-specific variables ****/
TLC5955 tlc;                            // TLC5955 object

/**** Device-specific commands ****/
const uint8_t LedArrayInterface::device_command_count = 1;
const char * LedArrayInterface::device_commandNamesShort[] = {"c"};
const char * LedArrayInterface::device_commandNamesLong[] = {"center"};
const uint16_t LedArrayInterface::device_command_pattern_dimensions[][2] = {{1,5}}; // Number of commands, number of LEDs in each command.

PROGMEM const int16_t center_led_list[1][5] = {
  {0, 1, 2, 3, 4}
};

// Define LED positions in cartesian coordinates (LED#, channel, x * 100mm, y * 100mm, z * 100mm)
PROGMEM const int16_t LedArrayInterface::led_positions[1529][5] = {
        {0, 90, 0, 0, 6500},
        {1, 150, 417, 0, 6500},
        {2, 108, 0, 417, 6500},
        {3, 94, 0, -417, 6500},
        {4, 91, -417, 0, 6500},
        {5, 160, 417, 417, 6500},
        {6, 146, 417, -417, 6500},
        {7, 104, -417, 417, 6500},
        {8, 95, -417, -417, 6500},
        {9, 93, 0, -835, 6500},
        {10, 87, -835, 0, 6500},
        {11, 109, 0, 835, 6500},
        {12, 151, 835, 0, 6500},
        {13, 89, -417, -835, 6500},
        {14, 83, -835, -417, 6500},
        {15, 100, -835, 417, 6500},
        {16, 105, -417, 835, 6500},
        {17, 164, 835, 417, 6500},
        {18, 147, 835, -417, 6500},
        {19, 145, 417, -835, 6500},
        {20, 161, 417, 835, 6500},
        {21, 149, 835, -835, 6500},
        {22, 165, 835, 835, 6500},
        {23, 85, -835, -835, 6500},
        {24, 101, -835, 835, 6500},
        {25, 86, -1252, 0, 6500},
        {26, 92, 0, -1252, 6500},
        {27, 110, 0, 1252, 6500},
        {28, 155, 1252, 0, 6500},
        {29, 88, -417, -1252, 6500},
        {30, 168, 1252, 417, 6500},
        {31, 162, 417, 1252, 6500},
        {32, 111, -417, 1252, 6500},
        {33, 82, -1252, -417, 6500},
        {34, 144, 417, -1252, 6500},
        {35, 159, 1252, -417, 6500},
        {36, 96, -1252, 417, 6500},
        {37, 81, -1252, -835, 6500},
        {38, 97, -1252, 835, 6500},
        {39, 84, -835, -1252, 6500},
        {40, 169, 1252, 835, 6500},
        {41, 148, 835, -1252, 6500},
        {42, 153, 1252, -835, 6500},
        {43, 163, 835, 1252, 6500},
        {44, 99, -835, 1252, 6500},
        {45, 106, 0, 1669, 6500},
        {46, 26, -1669, 0, 6500},
        {47, 154, 1669, 0, 6500},
        {48, 74, 0, -1669, 6500},
        {49, 166, 417, 1669, 6500},
        {50, 30, -1669, -417, 6500},
        {51, 44, -1669, 417, 6500},
        {52, 75, -417, -1669, 6500},
        {53, 134, 417, -1669, 6500},
        {54, 107, -417, 1669, 6500},
        {55, 172, 1669, 417, 6500},
        {56, 158, 1669, -417, 6500},
        {57, 175, 1252, 1252, 6500},
        {58, 80, -1252, -1252, 6500},
        {59, 152, 1252, -1252, 6500},
        {60, 98, -1252, 1252, 6500},
        {61, 71, -835, -1669, 6500},
        {62, 173, 1669, 835, 6500},
        {63, 135, 835, -1669, 6500},
        {64, 167, 835, 1669, 6500},
        {65, 45, -1669, 835, 6500},
        {66, 103, -835, 1669, 6500},
        {67, 29, -1669, -835, 6500},
        {68, 157, 1669, -835, 6500},
        {69, 124, 0, 2087, 6500},
        {70, 214, 2087, 0, 6500},
        {71, 27, -2087, 0, 6500},
        {72, 78, 0, -2087, 6500},
        {73, 70, -1252, -1669, 6500},
        {74, 28, -1669, -1252, 6500},
        {75, 171, 1252, 1669, 6500},
        {76, 156, 1669, -1252, 6500},
        {77, 102, -1252, 1669, 6500},
        {78, 174, 1669, 1252, 6500},
        {79, 46, -1669, 1252, 6500},
        {80, 139, 1252, -1669, 6500},
        {81, 210, 2087, -417, 6500},
        {82, 40, -2087, 417, 6500},
        {83, 120, -417, 2087, 6500},
        {84, 224, 2087, 417, 6500},
        {85, 176, 417, 2087, 6500},
        {86, 79, -417, -2087, 6500},
        {87, 130, 417, -2087, 6500},
        {88, 31, -2087, -417, 6500},
        {89, 116, -835, 2087, 6500},
        {90, 41, -2087, 835, 6500},
        {91, 209, 2087, -835, 6500},
        {92, 67, -835, -2087, 6500},
        {93, 225, 2087, 835, 6500},
        {94, 25, -2087, -835, 6500},
        {95, 180, 835, 2087, 6500},
        {96, 131, 835, -2087, 6500},
        {97, 10, -1669, -1669, 6500},
        {98, 170, 1669, 1669, 6500},
        {99, 138, 1669, -1669, 6500},
        {100, 42, -1669, 1669, 6500},
        {101, 24, -2087, -1252, 6500},
        {102, 112, -1252, 2087, 6500},
        {103, 226, 2087, 1252, 6500},
        {104, 47, -2087, 1252, 6500},
        {105, 143, 1252, -2087, 6500},
        {106, 184, 1252, 2087, 6500},
        {107, 66, -1252, -2087, 6500},
        {108, 208, 2087, -1252, 6500},
        {109, 23, -2504, 0, 6500},
        {110, 77, 0, -2504, 6500},
        {111, 125, 0, 2504, 6500},
        {112, 215, 2504, 0, 6500},
        {113, 211, 2504, -417, 6500},
        {114, 121, -417, 2504, 6500},
        {115, 73, -417, -2504, 6500},
        {116, 177, 417, 2504, 6500},
        {117, 129, 417, -2504, 6500},
        {118, 36, -2504, 417, 6500},
        {119, 228, 2504, 417, 6500},
        {120, 19, -2504, -417, 6500},
        {121, 69, -835, -2504, 6500},
        {122, 133, 835, -2504, 6500},
        {123, 21, -2504, -835, 6500},
        {124, 117, -835, 2504, 6500},
        {125, 229, 2504, 835, 6500},
        {126, 37, -2504, 835, 6500},
        {127, 213, 2504, -835, 6500},
        {128, 181, 835, 2504, 6500},
        {129, 230, 2087, 1669, 6500},
        {130, 60, -1669, 2087, 6500},
        {131, 11, -2087, -1669, 6500},
        {132, 14, -1669, -2087, 6500},
        {133, 188, 1669, 2087, 6500},
        {134, 198, 2087, -1669, 6500},
        {135, 142, 1669, -2087, 6500},
        {136, 43, -2087, 1669, 6500},
        {137, 113, -1252, 2504, 6500},
        {138, 185, 1252, 2504, 6500},
        {139, 137, 1252, -2504, 6500},
        {140, 20, -2504, -1252, 6500},
        {141, 212, 2504, -1252, 6500},
        {142, 35, -2504, 1252, 6500},
        {143, 227, 2504, 1252, 6500},
        {144, 65, -1252, -2504, 6500},
        {145, 76, 0, -2921, 6500},
        {146, 126, 0, 2921, 6500},
        {147, 22, -2921, 0, 6500},
        {148, 219, 2921, 0, 6500},
        {149, 15, -2087, -2087, 6500},
        {150, 194, 2087, -2087, 6500},
        {151, 240, 2087, 2087, 6500},
        {152, 56, -2087, 2087, 6500},
        {153, 127, -417, 2921, 6500},
        {154, 32, -2921, 417, 6500},
        {155, 178, 417, 2921, 6500},
        {156, 128, 417, -2921, 6500},
        {157, 18, -2921, -417, 6500},
        {158, 232, 2921, 417, 6500},
        {159, 223, 2921, -417, 6500},
        {160, 72, -417, -2921, 6500},
        {161, 199, 2504, -1669, 6500},
        {162, 39, -2504, 1669, 6500},
        {163, 189, 1669, 2504, 6500},
        {164, 13, -1669, -2504, 6500},
        {165, 231, 2504, 1669, 6500},
        {166, 7, -2504, -1669, 6500},
        {167, 141, 1669, -2504, 6500},
        {168, 61, -1669, 2504, 6500},
        {169, 132, 835, -2921, 6500},
        {170, 115, -835, 2921, 6500},
        {171, 233, 2921, 835, 6500},
        {172, 33, -2921, 835, 6500},
        {173, 68, -835, -2921, 6500},
        {174, 179, 835, 2921, 6500},
        {175, 217, 2921, -835, 6500},
        {176, 17, -2921, -835, 6500},
        {177, 766, 3051, -218, 6353},
        {178, 1097, 217, -3051, 6353},
        {179, 761, 3051, 217, 6353},
        {180, 1438, -3051, 218, 6353},
        {181, 1433, -3051, -217, 6353},
        {182, 1102, -218, -3051, 6353},
        {183, 430, 218, 3051, 6353},
        {184, 425, -217, 3051, 6353},
        {185, 34, -2921, 1252, 6500},
        {186, 16, -2921, -1252, 6500},
        {187, 191, 1252, 2921, 6500},
        {188, 136, 1252, -2921, 6500},
        {189, 114, -1252, 2921, 6500},
        {190, 216, 2921, -1252, 6500},
        {191, 64, -1252, -2921, 6500},
        {192, 239, 2921, 1252, 6500},
        {193, 764, 3051, 652, 6353},
        {194, 1434, -3051, 653, 6353},
        {195, 1436, -3051, -652, 6353},
        {196, 1100, 652, -3051, 6353},
        {197, 428, -652, 3051, 6353},
        {198, 762, 3051, -653, 6353},
        {199, 426, 653, 3051, 6353},
        {200, 1098, -653, -3051, 6353},
        {201, 193, 2087, -2504, 6500},
        {202, 52, -2504, 2087, 6500},
        {203, 195, 2504, -2087, 6500},
        {204, 9, -2087, -2504, 6500},
        {205, 57, -2087, 2504, 6500},
        {206, 241, 2087, 2504, 6500},
        {207, 3, -2504, -2087, 6500},
        {208, 244, 2504, 2087, 6500},
        {209, 1082, 1087, -3051, 6353},
        {210, 410, -1087, 3051, 6353},
        {211, 780, 3051, -1088, 6353},
        {212, 746, 3051, 1087, 6353},
        {213, 444, 1088, 3051, 6353},
        {214, 1418, -3051, -1087, 6353},
        {215, 1116, -1088, -3051, 6353},
        {216, 1452, -3051, 1088, 6353},
        {217, 6, -2921, -1669, 6500},
        {218, 203, 2921, -1669, 6500},
        {219, 38, -2921, 1669, 6500},
        {220, 62, -1669, 2921, 6500},
        {221, 12, -1669, -2921, 6500},
        {222, 140, 1669, -2921, 6500},
        {223, 235, 2921, 1669, 6500},
        {224, 190, 1669, 2921, 6500},
        {225, 777, 3051, -1523, 6353},
        {226, 1086, 1522, -3051, 6353},
        {227, 441, 1523, 3051, 6353},
        {228, 414, -1522, 3051, 6353},
        {229, 750, 3051, 1522, 6353},
        {230, 1422, -3051, -1522, 6353},
        {231, 1113, -1523, -3051, 6353},
        {232, 1449, -3051, 1523, 6353},
        {233, 1101, 0, -3268, 6045},
        {234, 765, 3268, 0, 6045},
        {235, 1437, -3268, 0, 6045},
        {236, 429, 0, 3268, 6045},
        {237, 245, 2504, 2504, 6500},
        {238, 53, -2504, 2504, 6500},
        {239, 197, 2504, -2504, 6500},
        {240, 5, -2504, -2504, 6500},
        {241, 1432, -3268, -435, 6045},
        {242, 424, -435, 3268, 6045},
        {243, 1103, -435, -3268, 6045},
        {244, 1096, 435, -3268, 6045},
        {245, 1439, -3268, 435, 6045},
        {246, 760, 3268, 435, 6045},
        {247, 767, 3268, -435, 6045},
        {248, 431, 435, 3268, 6045},
        {249, 192, 2087, -2921, 6500},
        {250, 242, 2087, 2921, 6500},
        {251, 248, 2921, 2087, 6500},
        {252, 8, -2087, -2921, 6500},
        {253, 48, -2921, 2087, 6500},
        {254, 207, 2921, -2087, 6500},
        {255, 2, -2921, -2087, 6500},
        {256, 63, -2087, 2921, 6500},
        {257, 1083, 870, -3268, 6045},
        {258, 411, -870, 3268, 6045},
        {259, 1419, -3268, -870, 6045},
        {260, 747, 3268, 870, 6045},
        {261, 1099, -870, -3268, 6045},
        {262, 1435, -3268, 870, 6045},
        {263, 763, 3268, -870, 6045},
        {264, 427, 870, 3268, 6045},
        {265, 409, -1957, 3051, 6353},
        {266, 1417, -3051, -1958, 6353},
        {267, 745, 3051, 1957, 6353},
        {268, 1081, 1958, -3051, 6353},
        {269, 446, 1958, 3051, 6353},
        {270, 1118, -1958, -3051, 6353},
        {271, 782, 3051, -1958, 6353},
        {272, 1454, -3051, 1958, 6353},
        {273, 751, 3268, 1305, 6045},
        {274, 415, -1305, 3268, 6045},
        {275, 1423, -3268, -1305, 6045},
        {276, 1448, -3268, 1305, 6045},
        {277, 1087, 1305, -3268, 6045},
        {278, 776, 3268, -1305, 6045},
        {279, 1112, -1305, -3268, 6045},
        {280, 440, 1305, 3268, 6045},
        {281, 49, -2921, 2504, 6500},
        {282, 4, -2504, -2921, 6500},
        {283, 1, -2921, -2504, 6500},
        {284, 249, 2921, 2504, 6500},
        {285, 243, 2504, 2921, 6500},
        {286, 51, -2504, 2921, 6500},
        {287, 201, 2921, -2504, 6500},
        {288, 196, 2504, -2921, 6500},
        {289, 1094, -218, -3486, 5738},
        {290, 758, 3486, -218, 5738},
        {291, 422, 218, 3486, 5738},
        {292, 416, -217, 3486, 5738},
        {293, 1424, -3486, -217, 5738},
        {294, 1088, 217, -3486, 5738},
        {295, 752, 3486, 217, 5738},
        {296, 1430, -3486, 218, 5738},
        {297, 1420, -3051, -2392, 6353},
        {298, 748, 3051, 2392, 6353},
        {299, 778, 3051, -2393, 6353},
        {300, 1114, -2393, -3051, 6353},
        {301, 412, -2392, 3051, 6353},
        {302, 1084, 2392, -3051, 6353},
        {303, 442, 2393, 3051, 6353},
        {304, 1450, -3051, 2393, 6353},
        {305, 1421, -3268, -1740, 6045},
        {306, 1085, 1740, -3268, 6045},
        {307, 749, 3268, 1740, 6045},
        {308, 781, 3268, -1740, 6045},
        {309, 445, 1740, 3268, 6045},
        {310, 1117, -1740, -3268, 6045},
        {311, 1453, -3268, 1740, 6045},
        {312, 413, -1740, 3268, 6045},
        {313, 1092, 652, -3486, 5738},
        {314, 1428, -3486, -652, 5738},
        {315, 1095, -653, -3486, 5738},
        {316, 1431, -3486, 653, 5738},
        {317, 756, 3486, 652, 5738},
        {318, 759, 3486, -653, 5738},
        {319, 423, 653, 3486, 5738},
        {320, 420, -652, 3486, 5738},
        {321, 50, -2921, 2921, 6500},
        {322, 200, 2921, -2921, 6500},
        {323, 255, 2921, 2921, 6500},
        {324, 0, -2921, -2921, 6500},
        {325, 1079, 1087, -3486, 5738},
        {326, 407, -1087, 3486, 5738},
        {327, 743, 3486, 1087, 5738},
        {328, 772, 3486, -1088, 5738},
        {329, 1415, -3486, -1087, 5738},
        {330, 1108, -1088, -3486, 5738},
        {331, 1444, -3486, 1088, 5738},
        {332, 436, 1088, 3486, 5738},
        {333, 1080, 2175, -3268, 6045},
        {334, 1416, -3268, -2175, 6045},
        {335, 447, 2175, 3268, 6045},
        {336, 783, 3268, -2175, 6045},
        {337, 744, 3268, 2175, 6045},
        {338, 408, -2175, 3268, 6045},
        {339, 1119, -2175, -3268, 6045},
        {340, 1455, -3268, 2175, 6045},
        {341, 1563, -3051, -2828, 6353},
        {342, 916, 3051, -2828, 6353},
        {343, 891, 3051, 2828, 6353},
        {344, 555, -2828, 3051, 6353},
        {345, 1252, -2828, -3051, 6353},
        {346, 1588, -3051, 2828, 6353},
        {347, 1227, 2828, -3051, 6353},
        {348, 580, 2828, 3051, 6353},
        {349, 742, 3486, 1522, 5738},
        {350, 432, 1523, 3486, 5738},
        {351, 1440, -3486, 1523, 5738},
        {352, 1104, -1523, -3486, 5738},
        {353, 768, 3486, -1523, 5738},
        {354, 1414, -3486, -1522, 5738},
        {355, 406, -1522, 3486, 5738},
        {356, 1078, 1522, -3486, 5738},
        {357, 1089, 0, -3703, 5430},
        {358, 1425, -3703, 0, 5430},
        {359, 753, 3703, 0, 5430},
        {360, 417, 0, 3703, 5430},
        {361, 1426, -3703, 435, 5430},
        {362, 754, 3703, -435, 5430},
        {363, 1093, 435, -3703, 5430},
        {364, 1429, -3703, -435, 5430},
        {365, 418, 435, 3703, 5430},
        {366, 757, 3703, 435, 5430},
        {367, 421, -435, 3703, 5430},
        {368, 1090, -435, -3703, 5430},
        {369, 1223, 2610, -3268, 6045},
        {370, 1559, -3268, -2610, 6045},
        {371, 887, 3268, 2610, 6045},
        {372, 443, 2610, 3268, 6045},
        {373, 779, 3268, -2610, 6045},
        {374, 551, -2610, 3268, 6045},
        {375, 1451, -3268, 2610, 6045},
        {376, 1115, -2610, -3268, 6045},
        {377, 1408, -3486, -1958, 5738},
        {378, 1072, 1958, -3486, 5738},
        {379, 438, 1958, 3486, 5738},
        {380, 400, -1957, 3486, 5738},
        {381, 774, 3486, -1958, 5738},
        {382, 736, 3486, 1957, 5738},
        {383, 1446, -3486, 1958, 5738},
        {384, 1110, -1958, -3486, 5738},
        {385, 419, 870, 3703, 5430},
        {386, 1091, -870, -3703, 5430},
        {387, 755, 3703, -870, 5430},
        {388, 1075, 870, -3703, 5430},
        {389, 739, 3703, 870, 5430},
        {390, 403, -870, 3703, 5430},
        {391, 1411, -3703, -870, 5430},
        {392, 1427, -3703, 870, 5430},
        {393, 1109, -1305, -3703, 5430},
        {394, 1445, -3703, 1305, 5430},
        {395, 773, 3703, -1305, 5430},
        {396, 402, -1305, 3703, 5430},
        {397, 437, 1305, 3703, 5430},
        {398, 738, 3703, 1305, 5430},
        {399, 1074, 1305, -3703, 5430},
        {400, 1410, -3703, -1305, 5430},
        {401, 439, 2393, 3486, 5738},
        {402, 775, 3486, -2393, 5738},
        {403, 1111, -2393, -3486, 5738},
        {404, 1412, -3486, -2392, 5738},
        {405, 404, -2392, 3486, 5738},
        {406, 740, 3486, 2392, 5738},
        {407, 1076, 2392, -3486, 5738},
        {408, 1447, -3486, 2393, 5738},
        {409, 1584, -3268, 3045, 6045},
        {410, 1231, 3045, -3268, 6045},
        {411, 895, 3268, 3045, 6045},
        {412, 576, 3045, 3268, 6045},
        {413, 1248, -3045, -3268, 6045},
        {414, 912, 3268, -3045, 6045},
        {415, 559, -3045, 3268, 6045},
        {416, 1567, -3268, -3045, 6045},
        {417, 737, 3703, 1740, 5430},
        {418, 1105, -1740, -3703, 5430},
        {419, 1441, -3703, 1740, 5430},
        {420, 401, -1740, 3703, 5430},
        {421, 1073, 1740, -3703, 5430},
        {422, 433, 1740, 3703, 5430},
        {423, 1409, -3703, -1740, 5430},
        {424, 769, 3703, -1740, 5430},
        {425, 382, 218, 3921, 5123},
        {426, 1385, -3921, -217, 5123},
        {427, 377, -217, 3921, 5123},
        {428, 1390, -3921, 218, 5123},
        {429, 718, 3921, -218, 5123},
        {430, 1054, -218, -3921, 5123},
        {431, 1049, 217, -3921, 5123},
        {432, 713, 3921, 217, 5123},
        {433, 378, 653, 3921, 5123},
        {434, 1052, 652, -3921, 5123},
        {435, 1386, -3921, 653, 5123},
        {436, 1050, -653, -3921, 5123},
        {437, 716, 3921, 652, 5123},
        {438, 714, 3921, -653, 5123},
        {439, 380, -652, 3921, 5123},
        {440, 1388, -3921, -652, 5123},
        {441, 1249, -2828, -3486, 5738},
        {442, 577, 2828, 3486, 5738},
        {443, 1555, -3486, -2828, 5738},
        {444, 913, 3486, -2828, 5738},
        {445, 1219, 2828, -3486, 5738},
        {446, 1585, -3486, 2828, 5738},
        {447, 547, -2828, 3486, 5738},
        {448, 883, 3486, 2828, 5738},
        {449, 741, 3703, 2175, 5430},
        {450, 1106, -2175, -3703, 5430},
        {451, 1413, -3703, -2175, 5430},
        {452, 1442, -3703, 2175, 5430},
        {453, 1077, 2175, -3703, 5430},
        {454, 405, -2175, 3703, 5430},
        {455, 770, 3703, -2175, 5430},
        {456, 434, 2175, 3703, 5430},
        {457, 698, 3921, 1087, 5123},
        {458, 362, -1087, 3921, 5123},
        {459, 1370, -3921, -1087, 5123},
        {460, 1034, 1087, -3921, 5123},
        {461, 1404, -3921, 1088, 5123},
        {462, 396, 1088, 3921, 5123},
        {463, 1068, -1088, -3921, 5123},
        {464, 732, 3921, -1088, 5123},
        {465, 1401, -3921, 1523, 5123},
        {466, 729, 3921, -1523, 5123},
        {467, 1065, -1523, -3921, 5123},
        {468, 393, 1523, 3921, 5123},
        {469, 702, 3921, 1522, 5123},
        {470, 366, -1522, 3921, 5123},
        {471, 1374, -3921, -1522, 5123},
        {472, 1038, 1522, -3921, 5123},
        {473, 917, 3486, -3263, 5738},
        {474, 1562, -3486, -3263, 5738},
        {475, 1589, -3486, 3263, 5738},
        {476, 1253, -3263, -3486, 5738},
        {477, 581, 3263, 3486, 5738},
        {478, 1226, 3262, -3486, 5738},
        {479, 554, -3262, 3486, 5738},
        {480, 890, 3486, 3262, 5738},
        {481, 1221, 2610, -3703, 5430},
        {482, 1443, -3703, 2610, 5430},
        {483, 1107, -2610, -3703, 5430},
        {484, 1557, -3703, -2610, 5430},
        {485, 549, -2610, 3703, 5430},
        {486, 885, 3703, 2610, 5430},
        {487, 771, 3703, -2610, 5430},
        {488, 435, 2610, 3703, 5430},
        {489, 361, -1957, 3921, 5123},
        {490, 697, 3921, 1957, 5123},
        {491, 1406, -3921, 1958, 5123},
        {492, 1070, -1958, -3921, 5123},
        {493, 1033, 1958, -3921, 5123},
        {494, 1369, -3921, -1958, 5123},
        {495, 734, 3921, -1958, 5123},
        {496, 398, 1958, 3921, 5123},
        {497, 381, 0, 4138, 4815},
        {498, 717, 4138, 0, 4815},
        {499, 1053, 0, -4138, 4815},
        {500, 1389, -4138, 0, 4815},
        {501, 1391, -4138, 435, 4815},
        {502, 1384, -4138, -435, 4815},
        {503, 1055, -435, -4138, 4815},
        {504, 719, 4138, -435, 4815},
        {505, 1048, 435, -4138, 4815},
        {506, 712, 4138, 435, 4815},
        {507, 383, 435, 4138, 4815},
        {508, 376, -435, 4138, 4815},
        {509, 363, -870, 4138, 4815},
        {510, 1371, -4138, -870, 4815},
        {511, 715, 4138, -870, 4815},
        {512, 1051, -870, -4138, 4815},
        {513, 1035, 870, -4138, 4815},
        {514, 699, 4138, 870, 4815},
        {515, 1387, -4138, 870, 4815},
        {516, 379, 870, 4138, 4815},
        {517, 918, 3703, -3045, 5430},
        {518, 1222, 3045, -3703, 5430},
        {519, 582, 3045, 3703, 5430},
        {520, 1590, -3703, 3045, 5430},
        {521, 886, 3703, 3045, 5430},
        {522, 1254, -3045, -3703, 5430},
        {523, 1558, -3703, -3045, 5430},
        {524, 550, -3045, 3703, 5430},
        {525, 1402, -3921, 2393, 5123},
        {526, 730, 3921, -2393, 5123},
        {527, 1066, -2393, -3921, 5123},
        {528, 394, 2393, 3921, 5123},
        {529, 1372, -3921, -2392, 5123},
        {530, 1036, 2392, -3921, 5123},
        {531, 364, -2392, 3921, 5123},
        {532, 700, 3921, 2392, 5123},
        {533, 703, 4138, 1305, 4815},
        {534, 367, -1305, 4138, 4815},
        {535, 1064, -1305, -4138, 4815},
        {536, 1039, 1305, -4138, 4815},
        {537, 1375, -4138, -1305, 4815},
        {538, 392, 1305, 4138, 4815},
        {539, 728, 4138, -1305, 4815},
        {540, 1400, -4138, 1305, 4815},
        {541, 1405, -4138, 1740, 4815},
        {542, 733, 4138, -1740, 4815},
        {543, 1069, -1740, -4138, 4815},
        {544, 1037, 1740, -4138, 4815},
        {545, 701, 4138, 1740, 4815},
        {546, 397, 1740, 4138, 4815},
        {547, 1373, -4138, -1740, 4815},
        {548, 365, -1740, 4138, 4815},
        {549, 1586, -3703, 3480, 5430},
        {550, 894, 3703, 3480, 5430},
        {551, 1566, -3703, -3480, 5430},
        {552, 1230, 3480, -3703, 5430},
        {553, 558, -3480, 3703, 5430},
        {554, 914, 3703, -3480, 5430},
        {555, 578, 3480, 3703, 5430},
        {556, 1250, -3480, -3703, 5430},
        {557, 874, 3921, 2828, 5123},
        {558, 1546, -3921, -2828, 5123},
        {559, 1210, 2828, -3921, 5123},
        {560, 789, 3921, -2828, 5123},
        {561, 1125, -2828, -3921, 5123},
        {562, 1461, -3921, 2828, 5123},
        {563, 538, -2827, 3921, 5123},
        {564, 453, 2828, 3921, 5123},
        {565, 374, 218, 4356, 4508},
        {566, 710, 4356, -218, 4508},
        {567, 704, 4356, 217, 4508},
        {568, 1046, -218, -4356, 4508},
        {569, 368, -217, 4356, 4508},
        {570, 1382, -4356, 218, 4508},
        {571, 1040, 217, -4356, 4508},
        {572, 1376, -4356, -217, 4508},
        {573, 1032, 2175, -4138, 4815},
        {574, 360, -2175, 4138, 4815},
        {575, 1407, -4138, 2175, 4815},
        {576, 1071, -2175, -4138, 4815},
        {577, 1368, -4138, -2175, 4815},
        {578, 735, 4138, -2175, 4815},
        {579, 696, 4138, 2175, 4815},
        {580, 399, 2175, 4138, 4815},
        {581, 1383, -4356, 653, 4508},
        {582, 711, 4356, -653, 4508},
        {583, 375, 653, 4356, 4508},
        {584, 1047, -653, -4356, 4508},
        {585, 1380, -4356, -652, 4508},
        {586, 708, 4356, 652, 4508},
        {587, 372, -652, 4356, 4508},
        {588, 1044, 652, -4356, 4508},
        {589, 1120, -3263, -3921, 5123},
        {590, 448, 3263, 3921, 5123},
        {591, 784, 3921, -3263, 5123},
        {592, 1214, 3262, -3921, 5123},
        {593, 878, 3921, 3262, 5123},
        {594, 1456, -3921, 3263, 5123},
        {595, 542, -3262, 3921, 5123},
        {596, 1550, -3921, -3263, 5123},
        {597, 359, -1087, 4356, 4508},
        {598, 695, 4356, 1087, 4508},
        {599, 1060, -1088, -4356, 4508},
        {600, 1396, -4356, 1088, 4508},
        {601, 1031, 1087, -4356, 4508},
        {602, 388, 1088, 4356, 4508},
        {603, 724, 4356, -1088, 4508},
        {604, 1367, -4356, -1087, 4508},
        {605, 875, 4138, 2610, 4815},
        {606, 539, -2610, 4138, 4815},
        {607, 1403, -4138, 2610, 4815},
        {608, 731, 4138, -2610, 4815},
        {609, 1067, -2610, -4138, 4815},
        {610, 1547, -4138, -2610, 4815},
        {611, 395, 2610, 4138, 4815},
        {612, 1211, 2610, -4138, 4815},
        {613, 694, 4356, 1522, 4508},
        {614, 720, 4356, -1523, 4508},
        {615, 1056, -1523, -4356, 4508},
        {616, 1030, 1522, -4356, 4508},
        {617, 1366, -4356, -1522, 4508},
        {618, 358, -1522, 4356, 4508},
        {619, 1392, -4356, 1523, 4508},
        {620, 384, 1523, 4356, 4508},
        {621, 873, 3921, 3698, 5123},
        {622, 1464, -3921, 3698, 5123},
        {623, 1545, -3921, -3698, 5123},
        {624, 792, 3921, -3698, 5123},
        {625, 1128, -3698, -3921, 5123},
        {626, 456, 3698, 3921, 5123},
        {627, 537, -3698, 3921, 5123},
        {628, 1209, 3698, -3921, 5123},
        {629, 352, -1957, 4356, 4508},
        {630, 1360, -4356, -1958, 4508},
        {631, 390, 1958, 4356, 4508},
        {632, 1024, 1957, -4356, 4508},
        {633, 688, 4356, 1957, 4508},
        {634, 726, 4356, -1958, 4508},
        {635, 1062, -1958, -4356, 4508},
        {636, 1398, -4356, 1958, 4508},
        {637, 1121, -3045, -4138, 4815},
        {638, 1551, -4138, -3045, 4815},
        {639, 1457, -4138, 3045, 4815},
        {640, 449, 3045, 4138, 4815},
        {641, 543, -3045, 4138, 4815},
        {642, 1215, 3045, -4138, 4815},
        {643, 879, 4138, 3045, 4815},
        {644, 785, 4138, -3045, 4815},
        {645, 1377, -4573, 0, 4200},
        {646, 705, 4573, 0, 4200},
        {647, 1041, 0, -4573, 4200},
        {648, 369, 0, 4573, 4200},
        {649, 709, 4573, 435, 4200},
        {650, 1045, 435, -4573, 4200},
        {651, 706, 4573, -435, 4200},
        {652, 1042, -435, -4573, 4200},
        {653, 1381, -4573, -435, 4200},
        {654, 373, -435, 4573, 4200},
        {655, 370, 435, 4573, 4200},
        {656, 1378, -4573, 435, 4200},
        {657, 1028, 2392, -4356, 4508},
        {658, 356, -2392, 4356, 4508},
        {659, 692, 4356, 2392, 4508},
        {660, 1399, -4356, 2393, 4508},
        {661, 727, 4356, -2393, 4508},
        {662, 1364, -4356, -2392, 4508},
        {663, 391, 2393, 4356, 4508},
        {664, 1063, -2393, -4356, 4508},
        {665, 355, -870, 4573, 4200},
        {666, 707, 4573, -870, 4200},
        {667, 371, 870, 4573, 4200},
        {668, 1363, -4573, -870, 4200},
        {669, 1043, -870, -4573, 4200},
        {670, 691, 4573, 870, 4200},
        {671, 1027, 870, -4573, 4200},
        {672, 1379, -4573, 870, 4200},
        {673, 452, 3480, 4138, 4815},
        {674, 541, -3480, 4138, 4815},
        {675, 1213, 3480, -4138, 4815},
        {676, 1124, -3480, -4138, 4815},
        {677, 1460, -4138, 3480, 4815},
        {678, 788, 4138, -3480, 4815},
        {679, 1549, -4138, -3480, 4815},
        {680, 877, 4138, 3480, 4815},
        {681, 1026, 1305, -4573, 4200},
        {682, 690, 4573, 1305, 4200},
        {683, 1362, -4573, -1305, 4200},
        {684, 1397, -4573, 1305, 4200},
        {685, 1061, -1305, -4573, 4200},
        {686, 354, -1305, 4573, 4200},
        {687, 725, 4573, -1305, 4200},
        {688, 389, 1305, 4573, 4200},
        {689, 1543, -4356, -2828, 4508},
        {690, 786, 4356, -2828, 4508},
        {691, 1458, -4356, 2828, 4508},
        {692, 1122, -2828, -4356, 4508},
        {693, 450, 2828, 4356, 4508},
        {694, 871, 4356, 2828, 4508},
        {695, 1207, 2828, -4356, 4508},
        {696, 535, -2827, 4356, 4508},
        {697, 385, 1740, 4573, 4200},
        {698, 1057, -1740, -4573, 4200},
        {699, 1025, 1740, -4573, 4200},
        {700, 721, 4573, -1740, 4200},
        {701, 689, 4573, 1740, 4200},
        {702, 353, -1740, 4573, 4200},
        {703, 1361, -4573, -1740, 4200},
        {704, 1393, -4573, 1740, 4200},
        {705, 796, 4138, -3915, 4815},
        {706, 872, 4138, 3915, 4815},
        {707, 1132, -3915, -4138, 4815},
        {708, 1208, 3915, -4138, 4815},
        {709, 1468, -4138, 3915, 4815},
        {710, 536, -3915, 4138, 4815},
        {711, 460, 3915, 4138, 4815},
        {712, 1544, -4138, -3915, 4815},
        {713, 722, 4573, -2175, 4200},
        {714, 386, 2175, 4573, 4200},
        {715, 1365, -4573, -2175, 4200},
        {716, 1029, 2175, -4573, 4200},
        {717, 1394, -4573, 2175, 4200},
        {718, 357, -2175, 4573, 4200},
        {719, 693, 4573, 2175, 4200},
        {720, 1058, -2175, -4573, 4200},
        {721, 1542, -4356, -3263, 4508},
        {722, 1462, -4356, 3263, 4508},
        {723, 1126, -3263, -4356, 4508},
        {724, 534, -3262, 4356, 4508},
        {725, 790, 4356, -3263, 4508},
        {726, 454, 3263, 4356, 4508},
        {727, 870, 4356, 3262, 4508},
        {728, 1206, 3262, -4356, 4508},
        {729, 334, 218, 4791, 3892},
        {730, 670, 4791, -218, 3892},
        {731, 329, -217, 4791, 3892},
        {732, 1001, 217, -4791, 3892},
        {733, 1342, -4791, 218, 3892},
        {734, 1337, -4791, -217, 3892},
        {735, 1006, -218, -4791, 3892},
        {736, 665, 4791, 217, 3892},
        {737, 1338, -4791, 653, 3892},
        {738, 332, -652, 4791, 3892},
        {739, 1004, 652, -4791, 3892},
        {740, 668, 4791, 652, 3892},
        {741, 1340, -4791, -652, 3892},
        {742, 1002, -653, -4791, 3892},
        {743, 666, 4791, -653, 3892},
        {744, 330, 653, 4791, 3892},
        {745, 867, 4573, 2610, 4200},
        {746, 531, -2610, 4573, 4200},
        {747, 1203, 2610, -4573, 4200},
        {748, 1059, -2610, -4573, 4200},
        {749, 387, 2610, 4573, 4200},
        {750, 723, 4573, -2610, 4200},
        {751, 1395, -4573, 2610, 4200},
        {752, 1539, -4573, -2610, 4200},
        {753, 314, -1087, 4791, 3892},
        {754, 1322, -4791, -1087, 3892},
        {755, 986, 1087, -4791, 3892},
        {756, 650, 4791, 1087, 3892},
        {757, 348, 1088, 4791, 3892},
        {758, 1356, -4791, 1088, 3892},
        {759, 684, 4791, -1088, 3892},
        {760, 1020, -1088, -4791, 3892},
        {761, 528, -3697, 4356, 4508},
        {762, 462, 3698, 4356, 4508},
        {763, 1536, -4356, -3698, 4508},
        {764, 1470, -4356, 3698, 4508},
        {765, 864, 4356, 3698, 4508},
        {766, 1200, 3698, -4356, 4508},
        {767, 798, 4356, -3698, 4508},
        {768, 1134, -3698, -4356, 4508},
        {769, 1353, -4791, 1523, 3892},
        {770, 345, 1523, 4791, 3892},
        {771, 681, 4791, -1523, 3892},
        {772, 318, -1522, 4791, 3892},
        {773, 654, 4791, 1522, 3892},
        {774, 1017, -1523, -4791, 3892},
        {775, 990, 1522, -4791, 3892},
        {776, 1326, -4791, -1522, 3892},
        {777, 451, 3045, 4573, 4200},
        {778, 1123, -3045, -4573, 4200},
        {779, 787, 4573, -3045, 4200},
        {780, 866, 4573, 3045, 4200},
        {781, 1202, 3045, -4573, 4200},
        {782, 1538, -4573, -3045, 4200},
        {783, 530, -3045, 4573, 4200},
        {784, 1459, -4573, 3045, 4200},
        {785, 1321, -4791, -1958, 3892},
        {786, 985, 1957, -4791, 3892},
        {787, 350, 1958, 4791, 3892},
        {788, 1358, -4791, 1958, 3892},
        {789, 686, 4791, -1958, 3892},
        {790, 1022, -1958, -4791, 3892},
        {791, 313, -1957, 4791, 3892},
        {792, 649, 4791, 1957, 3892},
        {793, 868, 4356, 4132, 4508},
        {794, 1204, 4132, -4356, 4508},
        {795, 457, 4133, 4356, 4508},
        {796, 1129, -4133, -4356, 4508},
        {797, 532, -4132, 4356, 4508},
        {798, 1465, -4356, 4133, 4508},
        {799, 1540, -4356, -4133, 4508},
        {800, 793, 4356, -4133, 4508},
        {801, 529, -3480, 4573, 4200},
        {802, 1127, -3480, -4573, 4200},
        {803, 791, 4573, -3480, 4200},
        {804, 455, 3480, 4573, 4200},
        {805, 1537, -4573, -3480, 4200},
        {806, 1463, -4573, 3480, 4200},
        {807, 1201, 3480, -4573, 4200},
        {808, 865, 4573, 3480, 4200},
        {809, 652, 4791, 2392, 3892},
        {810, 988, 2392, -4791, 3892},
        {811, 316, -2392, 4791, 3892},
        {812, 1324, -4791, -2392, 3892},
        {813, 346, 2393, 4791, 3892},
        {814, 1354, -4791, 2393, 3892},
        {815, 1018, -2393, -4791, 3892},
        {816, 682, 4791, -2393, 3892},
        {817, 333, 0, 5009, 3585},
        {818, 669, 5009, 0, 3585},
        {819, 1005, 0, -5009, 3585},
        {820, 1341, -5009, 0, 3585},
        {821, 1007, -435, -5009, 3585},
        {822, 671, 5009, -435, 3585},
        {823, 335, 435, 5009, 3585},
        {824, 1343, -5009, 435, 3585},
        {825, 328, -435, 5009, 3585},
        {826, 1000, 435, -5009, 3585},
        {827, 664, 5009, 435, 3585},
        {828, 1336, -5009, -435, 3585},
        {829, 1339, -5009, 870, 3585},
        {830, 987, 870, -5009, 3585},
        {831, 1323, -5009, -870, 3585},
        {832, 1003, -870, -5009, 3585},
        {833, 667, 5009, -870, 3585},
        {834, 651, 5009, 870, 3585},
        {835, 315, -870, 5009, 3585},
        {836, 331, 870, 5009, 3585},
        {837, 812, 4791, -2828, 3892},
        {838, 476, 2828, 4791, 3892},
        {839, 858, 4791, 2828, 3892},
        {840, 1148, -2828, -4791, 3892},
        {841, 522, -2827, 4791, 3892},
        {842, 1194, 2828, -4791, 3892},
        {843, 1530, -4791, -2828, 3892},
        {844, 1484, -4791, 2828, 3892},
        {845, 1130, -3915, -4573, 4200},
        {846, 869, 4573, 3915, 4200},
        {847, 533, -3915, 4573, 4200},
        {848, 794, 4573, -3915, 4200},
        {849, 458, 3915, 4573, 4200},
        {850, 1205, 3915, -4573, 4200},
        {851, 1466, -4573, 3915, 4200},
        {852, 1541, -4573, -3915, 4200},
        {853, 344, 1305, 5009, 3585},
        {854, 319, -1305, 5009, 3585},
        {855, 991, 1305, -5009, 3585},
        {856, 680, 5009, -1305, 3585},
        {857, 1327, -5009, -1305, 3585},
        {858, 655, 5009, 1305, 3585},
        {859, 1016, -1305, -5009, 3585},
        {860, 1352, -5009, 1305, 3585},
        {861, 1357, -5009, 1740, 3585},
        {862, 317, -1740, 5009, 3585},
        {863, 685, 5009, -1740, 3585},
        {864, 1325, -5009, -1740, 3585},
        {865, 653, 5009, 1740, 3585},
        {866, 1021, -1740, -5009, 3585},
        {867, 989, 1740, -5009, 3585},
        {868, 349, 1740, 5009, 3585},
        {869, 1198, 3262, -4791, 3892},
        {870, 809, 4791, -3263, 3892},
        {871, 862, 4791, 3262, 3892},
        {872, 1145, -3263, -4791, 3892},
        {873, 526, -3262, 4791, 3892},
        {874, 1481, -4791, 3263, 3892},
        {875, 1534, -4791, -3263, 3892},
        {876, 473, 3263, 4791, 3892},
        {877, 557, -4350, 4573, 4200},
        {878, 1229, 4350, -4573, 4200},
        {879, 459, 4350, 4573, 4200},
        {880, 893, 4573, 4350, 4200},
        {881, 1131, -4350, -4573, 4200},
        {882, 795, 4573, -4350, 4200},
        {883, 1467, -4573, 4350, 4200},
        {884, 1565, -4573, -4350, 4200},
        {885, 648, 5009, 2175, 3585},
        {886, 351, 2175, 5009, 3585},
        {887, 312, -2175, 5009, 3585},
        {888, 1320, -5009, -2175, 3585},
        {889, 1359, -5009, 2175, 3585},
        {890, 687, 5009, -2175, 3585},
        {891, 984, 2175, -5009, 3585},
        {892, 1023, -2175, -5009, 3585},
        {893, 521, -3697, 4791, 3892},
        {894, 1150, -3698, -4791, 3892},
        {895, 1193, 3698, -4791, 3892},
        {896, 1486, -4791, 3698, 3892},
        {897, 478, 3698, 4791, 3892},
        {898, 814, 4791, -3698, 3892},
        {899, 857, 4791, 3698, 3892},
        {900, 1529, -4791, -3698, 3892},
        {901, 859, 5009, 2610, 3585},
        {902, 523, -2610, 5009, 3585},
        {903, 347, 2610, 5009, 3585},
        {904, 1195, 2610, -5009, 3585},
        {905, 1019, -2610, -5009, 3585},
        {906, 683, 5009, -2610, 3585},
        {907, 1531, -5009, -2610, 3585},
        {908, 1355, -5009, 2610, 3585},
        {909, 326, 218, 5226, 3277},
        {910, 662, 5226, -218, 3277},
        {911, 1328, -5226, -217, 3277},
        {912, 1334, -5226, 218, 3277},
        {913, 992, 217, -5226, 3277},
        {914, 320, -217, 5226, 3277},
        {915, 656, 5226, 217, 3277},
        {916, 998, -218, -5226, 3277},
        {917, 996, 652, -5226, 3277},
        {918, 324, -652, 5226, 3277},
        {919, 660, 5226, 652, 3277},
        {920, 999, -653, -5226, 3277},
        {921, 1335, -5226, 653, 3277},
        {922, 663, 5226, -653, 3277},
        {923, 327, 653, 5226, 3277},
        {924, 1332, -5226, -652, 3277},
        {925, 1196, 4132, -4791, 3892},
        {926, 860, 4791, 4132, 3892},
        {927, 474, 4133, 4791, 3892},
        {928, 524, -4132, 4791, 3892},
        {929, 810, 4791, -4133, 3892},
        {930, 1146, -4133, -4791, 3892},
        {931, 1532, -4791, -4133, 3892},
        {932, 1482, -4791, 4133, 3892},
        {933, 1319, -5226, -1087, 3277},
        {934, 340, 1088, 5226, 3277},
        {935, 676, 5226, -1088, 3277},
        {936, 1012, -1088, -5226, 3277},
        {937, 1348, -5226, 1088, 3277},
        {938, 311, -1087, 5226, 3277},
        {939, 647, 5226, 1087, 3277},
        {940, 983, 1087, -5226, 3277},
        {941, 1480, -5009, 3045, 3585},
        {942, 863, 5009, 3045, 3585},
        {943, 1535, -5009, -3045, 3585},
        {944, 1199, 3045, -5009, 3585},
        {945, 527, -3045, 5009, 3585},
        {946, 1144, -3045, -5009, 3585},
        {947, 808, 5009, -3045, 3585},
        {948, 472, 3045, 5009, 3585},
        {949, 336, 1523, 5226, 3277},
        {950, 1344, -5226, 1523, 3277},
        {951, 646, 5226, 1522, 3277},
        {952, 672, 5226, -1523, 3277},
        {953, 1008, -1523, -5226, 3277},
        {954, 310, -1522, 5226, 3277},
        {955, 982, 1522, -5226, 3277},
        {956, 1318, -5226, -1522, 3277},
        {957, 1587, -4791, 4568, 3892},
        {958, 889, 4791, 4568, 3892},
        {959, 1561, -4791, -4568, 3892},
        {960, 553, -4568, 4791, 3892},
        {961, 1225, 4568, -4791, 3892},
        {962, 579, 4568, 4791, 3892},
        {963, 1251, -4568, -4791, 3892},
        {964, 915, 4791, -4568, 3892},
        {965, 1533, -5009, -3480, 3585},
        {966, 525, -3480, 5009, 3585},
        {967, 1485, -5009, 3480, 3585},
        {968, 1197, 3480, -5009, 3585},
        {969, 861, 5009, 3480, 3585},
        {970, 477, 3480, 5009, 3585},
        {971, 1149, -3480, -5009, 3585},
        {972, 813, 5009, -3480, 3585},
        {973, 304, -1957, 5226, 3277},
        {974, 640, 5226, 1957, 3277},
        {975, 976, 1957, -5226, 3277},
        {976, 1312, -5226, -1958, 3277},
        {977, 342, 1958, 5226, 3277},
        {978, 678, 5226, -1958, 3277},
        {979, 1350, -5226, 1958, 3277},
        {980, 1014, -1958, -5226, 3277},
        {981, 679, 5226, -2393, 3277},
        {982, 980, 2392, -5226, 3277},
        {983, 644, 5226, 2392, 3277},
        {984, 1316, -5226, -2392, 3277},
        {985, 1351, -5226, 2393, 3277},
        {986, 1015, -2393, -5226, 3277},
        {987, 308, -2392, 5226, 3277},
        {988, 343, 2393, 5226, 3277},
        {989, 520, -3915, 5009, 3585},
        {990, 815, 5009, -3915, 3585},
        {991, 1487, -5009, 3915, 3585},
        {992, 1192, 3915, -5009, 3585},
        {993, 856, 5009, 3915, 3585},
        {994, 1528, -5009, -3915, 3585},
        {995, 1151, -3915, -5009, 3585},
        {996, 479, 3915, 5009, 3585},
        {997, 1527, -5226, -2828, 3277},
        {998, 1191, 2828, -5226, 3277},
        {999, 855, 5226, 2827, 3277},
        {1000, 519, -2827, 5226, 3277},
        {1001, 804, 5226, -2828, 3277},
        {1002, 1140, -2828, -5226, 3277},
        {1003, 468, 2828, 5226, 3277},
        {1004, 1476, -5226, 2828, 3277},
        {1005, 657, 5444, 0, 2970},
        {1006, 321, 0, 5444, 2970},
        {1007, 993, 0, -5444, 2970},
        {1008, 1329, -5444, 0, 2970},
        {1009, 658, 5444, -435, 2970},
        {1010, 322, 435, 5444, 2970},
        {1011, 1330, -5444, 435, 2970},
        {1012, 997, 435, -5444, 2970},
        {1013, 661, 5444, 435, 2970},
        {1014, 994, -435, -5444, 2970},
        {1015, 1333, -5444, -435, 2970},
        {1016, 325, -435, 5444, 2970},
        {1017, 882, 5009, 4350, 3585},
        {1018, 1147, -4350, -5009, 3585},
        {1019, 1218, 4350, -5009, 3585},
        {1020, 1483, -5009, 4350, 3585},
        {1021, 1554, -5009, -4350, 3585},
        {1022, 811, 5009, -4350, 3585},
        {1023, 546, -4350, 5009, 3585},
        {1024, 475, 4350, 5009, 3585},
        {1025, 1331, -5444, 870, 2970},
        {1026, 979, 870, -5444, 2970},
        {1027, 1315, -5444, -870, 2970},
        {1028, 307, -870, 5444, 2970},
        {1029, 643, 5444, 870, 2970},
        {1030, 323, 870, 5444, 2970},
        {1031, 995, -870, -5444, 2970},
        {1032, 659, 5444, -870, 2970},
        {1033, 1472, -5226, 3263, 3277},
        {1034, 464, 3263, 5226, 3277},
        {1035, 1526, -5226, -3263, 3277},
        {1036, 800, 5226, -3263, 3277},
        {1037, 1136, -3263, -5226, 3277},
        {1038, 518, -3262, 5226, 3277},
        {1039, 1190, 3262, -5226, 3277},
        {1040, 854, 5226, 3262, 3277},
        {1041, 978, 1305, -5444, 2970},
        {1042, 341, 1305, 5444, 2970},
        {1043, 642, 5444, 1305, 2970},
        {1044, 306, -1305, 5444, 2970},
        {1045, 677, 5444, -1305, 2970},
        {1046, 1349, -5444, 1305, 2970},
        {1047, 1314, -5444, -1305, 2970},
        {1048, 1013, -1305, -5444, 2970},
        {1049, 1313, -5444, -1740, 2970},
        {1050, 977, 1740, -5444, 2970},
        {1051, 673, 5444, -1740, 2970},
        {1052, 305, -1740, 5444, 2970},
        {1053, 641, 5444, 1740, 2970},
        {1054, 1345, -5444, 1740, 2970},
        {1055, 337, 1740, 5444, 2970},
        {1056, 1009, -1740, -5444, 2970},
        {1057, 587, 4785, 5009, 3585},
        {1058, 556, -4785, 5009, 3585},
        {1059, 892, 5009, 4785, 3585},
        {1060, 923, 5009, -4785, 3585},
        {1061, 1259, -4785, -5009, 3585},
        {1062, 1228, 4785, -5009, 3585},
        {1063, 1595, -5009, 4785, 3585},
        {1064, 1564, -5009, -4785, 3585},
        {1065, 1142, -3698, -5226, 3277},
        {1066, 806, 5226, -3698, 3277},
        {1067, 1478, -5226, 3698, 3277},
        {1068, 1520, -5226, -3698, 3277},
        {1069, 470, 3698, 5226, 3277},
        {1070, 512, -3697, 5226, 3277},
        {1071, 848, 5226, 3698, 3277},
        {1072, 1184, 3698, -5226, 3277},
        {1073, 338, 2175, 5444, 2970},
        {1074, 1346, -5444, 2175, 2970},
        {1075, 1317, -5444, -2175, 2970},
        {1076, 645, 5444, 2175, 2970},
        {1077, 981, 2175, -5444, 2970},
        {1078, 1010, -2175, -5444, 2970},
        {1079, 309, -2175, 5444, 2970},
        {1080, 674, 5444, -2175, 2970},
        {1081, 851, 5444, 2610, 2970},
        {1082, 675, 5444, -2610, 2970},
        {1083, 515, -2610, 5444, 2970},
        {1084, 1187, 2610, -5444, 2970},
        {1085, 1523, -5444, -2610, 2970},
        {1086, 339, 2610, 5444, 2970},
        {1087, 1347, -5444, 2610, 2970},
        {1088, 1011, -2610, -5444, 2970},
        {1089, 1479, -5226, 4133, 3277},
        {1090, 1188, 4132, -5226, 3277},
        {1091, 1143, -4133, -5226, 3277},
        {1092, 471, 4133, 5226, 3277},
        {1093, 807, 5226, -4133, 3277},
        {1094, 1524, -5226, -4133, 3277},
        {1095, 516, -4132, 5226, 3277},
        {1096, 852, 5226, 4132, 3277},
        {1097, 1522, -5444, -3045, 2970},
        {1098, 1186, 3045, -5444, 2970},
        {1099, 850, 5444, 3045, 2970},
        {1100, 514, -3045, 5444, 2970},
        {1101, 1141, -3045, -5444, 2970},
        {1102, 1477, -5444, 3045, 2970},
        {1103, 805, 5444, -3045, 2970},
        {1104, 469, 3045, 5444, 2970},
        {1105, 583, 4568, 5226, 3277},
        {1106, 919, 5226, -4568, 3277},
        {1107, 1217, 4568, -5226, 3277},
        {1108, 545, -4568, 5226, 3277},
        {1109, 1255, -4568, -5226, 3277},
        {1110, 881, 5226, 4568, 3277},
        {1111, 1553, -5226, -4568, 3277},
        {1112, 1591, -5226, 4568, 3277},
        {1113, 286, 218, 5661, 2662},
        {1114, 622, 5661, -218, 2662},
        {1115, 1294, -5661, 218, 2662},
        {1116, 958, -218, -5661, 2662},
        {1117, 1289, -5661, -217, 2662},
        {1118, 617, 5661, 217, 2662},
        {1119, 281, -217, 5661, 2662},
        {1120, 953, 217, -5661, 2662},
        {1121, 1292, -5661, -652, 2662},
        {1122, 282, 653, 5661, 2662},
        {1123, 620, 5661, 652, 2662},
        {1124, 956, 652, -5661, 2662},
        {1125, 1290, -5661, 653, 2662},
        {1126, 618, 5661, -653, 2662},
        {1127, 284, -652, 5661, 2662},
        {1128, 954, -653, -5661, 2662},
        {1129, 266, -1087, 5661, 2662},
        {1130, 1274, -5661, -1087, 2662},
        {1131, 602, 5661, 1087, 2662},
        {1132, 1308, -5661, 1088, 2662},
        {1133, 300, 1088, 5661, 2662},
        {1134, 972, -1088, -5661, 2662},
        {1135, 636, 5661, -1088, 2662},
        {1136, 938, 1087, -5661, 2662},
        {1137, 465, 3480, 5444, 2970},
        {1138, 801, 5444, -3480, 2970},
        {1139, 1137, -3480, -5444, 2970},
        {1140, 1473, -5444, 3480, 2970},
        {1141, 1185, 3480, -5444, 2970},
        {1142, 1521, -5444, -3480, 2970},
        {1143, 849, 5444, 3480, 2970},
        {1144, 513, -3480, 5444, 2970},
        {1145, 1305, -5661, 1523, 2662},
        {1146, 969, -1523, -5661, 2662},
        {1147, 1278, -5661, -1522, 2662},
        {1148, 297, 1523, 5661, 2662},
        {1149, 270, -1522, 5661, 2662},
        {1150, 942, 1522, -5661, 2662},
        {1151, 606, 5661, 1522, 2662},
        {1152, 633, 5661, -1523, 2662},
        {1153, 1598, -5226, 5003, 3277},
        {1154, 1262, -5003, -5226, 3277},
        {1155, 1224, 5003, -5226, 3277},
        {1156, 552, -5002, 5226, 3277},
        {1157, 1560, -5226, -5003, 3277},
        {1158, 926, 5226, -5003, 3277},
        {1159, 590, 5003, 5226, 3277},
        {1160, 888, 5226, 5003, 3277},
        {1161, 974, -1958, -5661, 2662},
        {1162, 265, -1957, 5661, 2662},
        {1163, 1310, -5661, 1958, 2662},
        {1164, 638, 5661, -1958, 2662},
        {1165, 601, 5661, 1957, 2662},
        {1166, 937, 1957, -5661, 2662},
        {1167, 302, 1958, 5661, 2662},
        {1168, 1273, -5661, -1958, 2662},
        {1169, 1474, -5444, 3915, 2970},
        {1170, 517, -3915, 5444, 2970},
        {1171, 802, 5444, -3915, 2970},
        {1172, 1138, -3915, -5444, 2970},
        {1173, 1525, -5444, -3915, 2970},
        {1174, 1189, 3915, -5444, 2970},
        {1175, 853, 5444, 3915, 2970},
        {1176, 466, 3915, 5444, 2970},
        {1177, 268, -2392, 5661, 2662},
        {1178, 604, 5661, 2392, 2662},
        {1179, 1276, -5661, -2392, 2662},
        {1180, 940, 2392, -5661, 2662},
        {1181, 634, 5661, -2393, 2662},
        {1182, 970, -2393, -5661, 2662},
        {1183, 1306, -5661, 2393, 2662},
        {1184, 298, 2393, 5661, 2662},
        {1185, 1139, -4350, -5444, 2970},
        {1186, 803, 5444, -4350, 2970},
        {1187, 467, 4350, 5444, 2970},
        {1188, 548, -4350, 5444, 2970},
        {1189, 1475, -5444, 4350, 2970},
        {1190, 1556, -5444, -4350, 2970},
        {1191, 884, 5444, 4350, 2970},
        {1192, 1220, 4350, -5444, 2970},
        {1193, 1178, 2828, -5661, 2662},
        {1194, 506, -2827, 5661, 2662},
        {1195, 1164, -2828, -5661, 2662},
        {1196, 828, 5661, -2828, 2662},
        {1197, 492, 2828, 5661, 2662},
        {1198, 1514, -5661, -2828, 2662},
        {1199, 1500, -5661, 2828, 2662},
        {1200, 842, 5661, 2827, 2662},
        {1201, 586, 4785, 5444, 2970},
        {1202, 544, -4785, 5444, 2970},
        {1203, 1258, -4785, -5444, 2970},
        {1204, 880, 5444, 4785, 2970},
        {1205, 922, 5444, -4785, 2970},
        {1206, 1216, 4785, -5444, 2970},
        {1207, 1552, -5444, -4785, 2970},
        {1208, 1594, -5444, 4785, 2970},
        {1209, 1497, -5661, 3263, 2662},
        {1210, 1518, -5661, -3263, 2662},
        {1211, 825, 5661, -3263, 2662},
        {1212, 846, 5661, 3262, 2662},
        {1213, 510, -3262, 5661, 2662},
        {1214, 489, 3263, 5661, 2662},
        {1215, 1182, 3262, -5661, 2662},
        {1216, 1161, -3263, -5661, 2662},
        {1217, 285, 0, 5879, 2355},
        {1218, 1293, -5879, 0, 2355},
        {1219, 621, 5879, 0, 2355},
        {1220, 957, 0, -5879, 2355},
        {1221, 280, -435, 5879, 2355},
        {1222, 616, 5879, 435, 2355},
        {1223, 1295, -5879, 435, 2355},
        {1224, 1288, -5879, -435, 2355},
        {1225, 952, 435, -5879, 2355},
        {1226, 959, -435, -5879, 2355},
        {1227, 623, 5879, -435, 2355},
        {1228, 287, 435, 5879, 2355},
        {1229, 1275, -5879, -870, 2355},
        {1230, 267, -870, 5879, 2355},
        {1231, 939, 870, -5879, 2355},
        {1232, 603, 5879, 870, 2355},
        {1233, 1291, -5879, 870, 2355},
        {1234, 955, -870, -5879, 2355},
        {1235, 283, 870, 5879, 2355},
        {1236, 619, 5879, -870, 2355},
        {1237, 1581, -5444, -5220, 2970},
        {1238, 573, -5220, 5444, 2970},
        {1239, 588, 5220, 5444, 2970},
        {1240, 1245, 5220, -5444, 2970},
        {1241, 924, 5444, -5220, 2970},
        {1242, 1260, -5220, -5444, 2970},
        {1243, 1596, -5444, 5220, 2970},
        {1244, 909, 5444, 5220, 2970},
        {1245, 841, 5661, 3698, 2662},
        {1246, 505, -3697, 5661, 2662},
        {1247, 1177, 3698, -5661, 2662},
        {1248, 830, 5661, -3698, 2662},
        {1249, 494, 3698, 5661, 2662},
        {1250, 1513, -5661, -3698, 2662},
        {1251, 1502, -5661, 3698, 2662},
        {1252, 1166, -3698, -5661, 2662},
        {1253, 271, -1305, 5879, 2355},
        {1254, 1279, -5879, -1305, 2355},
        {1255, 968, -1305, -5879, 2355},
        {1256, 943, 1305, -5879, 2355},
        {1257, 1304, -5879, 1305, 2355},
        {1258, 607, 5879, 1305, 2355},
        {1259, 632, 5879, -1305, 2355},
        {1260, 296, 1305, 5879, 2355},
        {1261, 637, 5879, -1740, 2355},
        {1262, 605, 5879, 1740, 2355},
        {1263, 1309, -5879, 1740, 2355},
        {1264, 941, 1740, -5879, 2355},
        {1265, 973, -1740, -5879, 2355},
        {1266, 301, 1740, 5879, 2355},
        {1267, 1277, -5879, -1740, 2355},
        {1268, 269, -1740, 5879, 2355},
        {1269, 490, 4133, 5661, 2662},
        {1270, 508, -4132, 5661, 2662},
        {1271, 1162, -4133, -5661, 2662},
        {1272, 844, 5661, 4132, 2662},
        {1273, 1516, -5661, -4133, 2662},
        {1274, 826, 5661, -4133, 2662},
        {1275, 1498, -5661, 4133, 2662},
        {1276, 1180, 4132, -5661, 2662},
        {1277, 264, -2175, 5879, 2355},
        {1278, 1311, -5879, 2175, 2355},
        {1279, 936, 2175, -5879, 2355},
        {1280, 600, 5879, 2175, 2355},
        {1281, 1272, -5879, -2175, 2355},
        {1282, 975, -2175, -5879, 2355},
        {1283, 303, 2175, 5879, 2355},
        {1284, 639, 5879, -2175, 2355},
        {1285, 1179, 2610, -5879, 2355},
        {1286, 299, 2610, 5879, 2355},
        {1287, 635, 5879, -2610, 2355},
        {1288, 843, 5879, 2610, 2355},
        {1289, 971, -2610, -5879, 2355},
        {1290, 1307, -5879, 2610, 2355},
        {1291, 1515, -5879, -2610, 2355},
        {1292, 507, -2610, 5879, 2355},
        {1293, 591, 4568, 5661, 2662},
        {1294, 1599, -5661, 4568, 2662},
        {1295, 569, -4568, 5661, 2662},
        {1296, 927, 5661, -4568, 2662},
        {1297, 1263, -4568, -5661, 2662},
        {1298, 1577, -5661, -4568, 2662},
        {1299, 1241, 4568, -5661, 2662},
        {1300, 905, 5661, 4568, 2662},
        {1301, 488, 3045, 5879, 2355},
        {1302, 1496, -5879, 3045, 2355},
        {1303, 1160, -3045, -5879, 2355},
        {1304, 824, 5879, -3045, 2355},
        {1305, 1519, -5879, -3045, 2355},
        {1306, 1183, 3045, -5879, 2355},
        {1307, 511, -3045, 5879, 2355},
        {1308, 847, 5879, 3045, 2355},
        {1309, 908, 5661, 5003, 2662},
        {1310, 1244, 5003, -5661, 2662},
        {1311, 572, -5002, 5661, 2662},
        {1312, 1580, -5661, -5003, 2662},
        {1313, 1593, -5661, 5003, 2662},
        {1314, 921, 5661, -5003, 2662},
        {1315, 1257, -5003, -5661, 2662},
        {1316, 585, 5003, 5661, 2662},
        {1317, 1501, -5879, 3480, 2355},
        {1318, 1181, 3480, -5879, 2355},
        {1319, 1165, -3480, -5879, 2355},
        {1320, 493, 3480, 5879, 2355},
        {1321, 509, -3480, 5879, 2355},
        {1322, 1517, -5879, -3480, 2355},
        {1323, 845, 5879, 3480, 2355},
        {1324, 829, 5879, -3480, 2355},
        {1325, 560, -5438, 5661, 2662},
        {1326, 896, 5661, 5438, 2662},
        {1327, 1232, 5438, -5661, 2662},
        {1328, 1568, -5661, -5438, 2662},
        {1329, 1592, -5661, 5438, 2662},
        {1330, 1256, -5438, -5661, 2662},
        {1331, 584, 5438, 5661, 2662},
        {1332, 920, 5661, -5438, 2662},
        {1333, 1286, -6096, 218, 2047},
        {1334, 272, -217, 6096, 2047},
        {1335, 614, 6096, -218, 2047},
        {1336, 1280, -6096, -217, 2047},
        {1337, 278, 218, 6096, 2047},
        {1338, 944, 217, -6096, 2047},
        {1339, 950, -218, -6096, 2047},
        {1340, 608, 6096, 217, 2047},
        {1341, 615, 6096, -653, 2047},
        {1342, 279, 653, 6096, 2047},
        {1343, 1284, -6096, -652, 2047},
        {1344, 1287, -6096, 653, 2047},
        {1345, 951, -653, -6096, 2047},
        {1346, 612, 6096, 652, 2047},
        {1347, 276, -652, 6096, 2047},
        {1348, 948, 652, -6096, 2047},
        {1349, 1167, -3915, -5879, 2355},
        {1350, 1512, -5879, -3915, 2355},
        {1351, 840, 5879, 3915, 2355},
        {1352, 1176, 3915, -5879, 2355},
        {1353, 831, 5879, -3915, 2355},
        {1354, 504, -3915, 5879, 2355},
        {1355, 495, 3915, 5879, 2355},
        {1356, 1503, -5879, 3915, 2355},
        {1357, 292, 1088, 6096, 2047},
        {1358, 628, 6096, -1088, 2047},
        {1359, 599, 6096, 1087, 2047},
        {1360, 964, -1088, -6096, 2047},
        {1361, 935, 1087, -6096, 2047},
        {1362, 1271, -6096, -1087, 2047},
        {1363, 263, -1087, 6096, 2047},
        {1364, 1300, -6096, 1088, 2047},
        {1365, 934, 1522, -6096, 2047},
        {1366, 598, 6096, 1522, 2047},
        {1367, 262, -1522, 6096, 2047},
        {1368, 1270, -6096, -1522, 2047},
        {1369, 1296, -6096, 1523, 2047},
        {1370, 288, 1523, 6096, 2047},
        {1371, 960, -1523, -6096, 2047},
        {1372, 624, 6096, -1523, 2047},
        {1373, 1163, -4350, -5879, 2355},
        {1374, 1499, -5879, 4350, 2355},
        {1375, 564, -4350, 5879, 2355},
        {1376, 900, 5879, 4350, 2355},
        {1377, 491, 4350, 5879, 2355},
        {1378, 1572, -5879, -4350, 2355},
        {1379, 827, 5879, -4350, 2355},
        {1380, 1236, 4350, -5879, 2355},
        {1381, 928, 1957, -6096, 2047},
        {1382, 1264, -6096, -1958, 2047},
        {1383, 1302, -6096, 1958, 2047},
        {1384, 966, -1958, -6096, 2047},
        {1385, 592, 6096, 1957, 2047},
        {1386, 294, 1958, 6096, 2047},
        {1387, 630, 6096, -1958, 2047},
        {1388, 256, -1957, 6096, 2047},
        {1389, 1268, -6096, -2392, 2047},
        {1390, 932, 2392, -6096, 2047},
        {1391, 1303, -6096, 2393, 2047},
        {1392, 260, -2392, 6096, 2047},
        {1393, 631, 6096, -2393, 2047},
        {1394, 596, 6096, 2392, 2047},
        {1395, 295, 2393, 6096, 2047},
        {1396, 967, -2393, -6096, 2047},
        {1397, 925, 5879, -4785, 2355},
        {1398, 1237, 4785, -5879, 2355},
        {1399, 901, 5879, 4785, 2355},
        {1400, 565, -4785, 5879, 2355},
        {1401, 589, 4785, 5879, 2355},
        {1402, 1261, -4785, -5879, 2355},
        {1403, 1597, -5879, 4785, 2355},
        {1404, 1573, -5879, -4785, 2355},
        {1405, 1511, -6096, -2828, 2047},
        {1406, 503, -2827, 6096, 2047},
        {1407, 820, 6096, -2828, 2047},
        {1408, 1175, 2828, -6096, 2047},
        {1409, 1492, -6096, 2828, 2047},
        {1410, 839, 6096, 2827, 2047},
        {1411, 484, 2828, 6096, 2047},
        {1412, 1156, -2828, -6096, 2047},
        {1413, 502, -3262, 6096, 2047},
        {1414, 1174, 3262, -6096, 2047},
        {1415, 816, 6096, -3263, 2047},
        {1416, 1152, -3263, -6096, 2047},
        {1417, 480, 3263, 6096, 2047},
        {1418, 838, 6096, 3262, 2047},
        {1419, 1488, -6096, 3263, 2047},
        {1420, 1510, -6096, -3262, 2047},
        {1421, 832, 6096, 3697, 2047},
        {1422, 1504, -6096, -3698, 2047},
        {1423, 822, 6096, -3698, 2047},
        {1424, 496, -3697, 6096, 2047},
        {1425, 1158, -3698, -6096, 2047},
        {1426, 486, 3698, 6096, 2047},
        {1427, 1168, 3698, -6096, 2047},
        {1428, 1494, -6096, 3698, 2047},
        {1429, 823, 6096, -4133, 2047},
        {1430, 1159, -4133, -6096, 2047},
        {1431, 1495, -6096, 4133, 2047},
        {1432, 1508, -6096, -4132, 2047},
        {1433, 487, 4133, 6096, 2047},
        {1434, 836, 6096, 4132, 2047},
        {1435, 500, -4132, 6096, 2047},
        {1436, 1172, 4132, -6096, 2047},
        {1437, 1281, -6314, 0, 1739},
        {1438, 273, 0, 6314, 1739},
        {1439, 609, 6314, 0, 1739},
        {1440, 945, 0, -6314, 1739},
        {1441, 277, -435, 6314, 1739},
        {1442, 946, -435, -6314, 1739},
        {1443, 1285, -6314, -435, 1739},
        {1444, 274, 435, 6314, 1739},
        {1445, 613, 6314, 435, 1739},
        {1446, 610, 6314, -435, 1739},
        {1447, 1282, -6314, 435, 1739},
        {1448, 949, 435, -6314, 1739},
        {1449, 1283, -6314, 870, 1739},
        {1450, 947, -870, -6314, 1739},
        {1451, 275, 870, 6314, 1739},
        {1452, 611, 6314, -870, 1739},
        {1453, 259, -870, 6314, 1739},
        {1454, 931, 870, -6314, 1739},
        {1455, 1267, -6314, -870, 1739},
        {1456, 595, 6314, 870, 1739},
        {1457, 258, -1305, 6314, 1739},
        {1458, 293, 1305, 6314, 1739},
        {1459, 629, 6314, -1305, 1739},
        {1460, 965, -1305, -6314, 1739},
        {1461, 1301, -6314, 1305, 1739},
        {1462, 930, 1305, -6314, 1739},
        {1463, 1266, -6314, -1305, 1739},
        {1464, 594, 6314, 1305, 1739},
        {1465, 593, 6314, 1740, 1739},
        {1466, 961, -1740, -6314, 1739},
        {1467, 1265, -6314, -1740, 1739},
        {1468, 257, -1740, 6314, 1739},
        {1469, 929, 1740, -6314, 1739},
        {1470, 289, 1740, 6314, 1739},
        {1471, 1297, -6314, 1740, 1739},
        {1472, 625, 6314, -1740, 1739},
        {1473, 597, 6314, 2175, 1739},
        {1474, 261, -2175, 6314, 1739},
        {1475, 962, -2175, -6314, 1739},
        {1476, 290, 2175, 6314, 1739},
        {1477, 1269, -6314, -2175, 1739},
        {1478, 933, 2175, -6314, 1739},
        {1479, 1298, -6314, 2175, 1739},
        {1480, 626, 6314, -2175, 1739},
        {1481, 1507, -6314, -2610, 1739},
        {1482, 1171, 2610, -6314, 1739},
        {1483, 1299, -6314, 2610, 1739},
        {1484, 291, 2610, 6314, 1739},
        {1485, 963, -2610, -6314, 1739},
        {1486, 627, 6314, -2610, 1739},
        {1487, 499, -2610, 6314, 1739},
        {1488, 835, 6314, 2610, 1739},
        {1489, 1506, -6314, -3045, 1739},
        {1490, 821, 6314, -3045, 1739},
        {1491, 834, 6314, 3045, 1739},
        {1492, 485, 3045, 6314, 1739},
        {1493, 1170, 3045, -6314, 1739},
        {1494, 1157, -3045, -6314, 1739},
        {1495, 498, -3045, 6314, 1739},
        {1496, 1493, -6314, 3045, 1739},
        {1497, 1247, -218, -6531, 1432},
        {1498, 1578, -6531, -217, 1432},
        {1499, 1242, 217, -6531, 1432},
        {1500, 906, 6531, 217, 1432},
        {1501, 575, 218, 6531, 1432},
        {1502, 570, -217, 6531, 1432},
        {1503, 911, 6531, -218, 1432},
        {1504, 1583, -6531, 218, 1432},
        {1505, 1579, -6531, 653, 1432},
        {1506, 571, 653, 6531, 1432},
        {1507, 1243, -653, -6531, 1432},
        {1508, 907, 6531, -653, 1432},
        {1509, 1582, -6531, -652, 1432},
        {1510, 574, -652, 6531, 1432},
        {1511, 1246, 652, -6531, 1432},
        {1512, 910, 6531, 652, 1432},
        {1513, 567, 1088, 6531, 1432},
        {1514, 1575, -6531, 1088, 1432},
        {1515, 568, -1087, 6531, 1432},
        {1516, 1576, -6531, -1087, 1432},
        {1517, 904, 6531, 1087, 1432},
        {1518, 1240, 1087, -6531, 1432},
        {1519, 903, 6531, -1088, 1432},
        {1520, 1239, -1088, -6531, 1432},
        {1521, 1571, -6531, 1523, 1432},
        {1522, 897, 6531, 1522, 1432},
        {1523, 1569, -6531, -1522, 1432},
        {1524, 1233, 1522, -6531, 1432},
        {1525, 1235, -1523, -6531, 1432},
        {1526, 899, 6531, -1523, 1432},
        {1527, 563, 1523, 6531, 1432},
        {1528, 561, -1522, 6531, 1432},
};


bool LedArrayInterface::get_max_current_enforcement()
{
        return TLC5955::enforce_max_current;
}

float LedArrayInterface::get_max_current_limit()
{
       return TLC5955::max_current_amps;
}

void LedArrayInterface::set_max_current_enforcement(bool enforce)
{
        TLC5955::enforce_max_current = enforce;
}

void LedArrayInterface::set_max_current_limit(float limit)
{
        if (limit > 0)
                TLC5955::max_current_amps = limit;
}

void LedArrayInterface::set_pin_order(int16_t led_number, int16_t color_channel_index, uint8_t position)
{
        tlc.set_pin_order_single(led_number, color_channel_index, position);
}

void LedArrayInterface::not_implemented(const char * command_name)
{
        Serial.print(F("Command "));
        Serial.print(command_name);
        Serial.printf(F(" is not implemented for this device.%s"), SERIAL_LINE_ENDING);
}

uint16_t LedArrayInterface::get_led_value(uint16_t led_number, int color_channel_index)
{
        int16_t channel_number = (int16_t)pgm_read_word(&(led_positions[led_number][1]));
        if (channel_number >= 0)
                return tlc.get_single_channel(channel_number);
        else
        {
                Serial.print(F("ERROR (LedArrayInterface::get_led_value) - invalid LED number ("));
                Serial.print(led_number);
                Serial.printf(F(")%s"), SERIAL_LINE_ENDING);
                return 0;
        }
}

// Debug Variables
bool LedArrayInterface::get_debug()
{
        return (LedArrayInterface::debug);
}

void LedArrayInterface::set_debug(int state)
{
        LedArrayInterface::debug = state;
        Serial.printf(F("(LedArrayInterface::set_debug): Set debug level to %d \n"), debug);
}

int LedArrayInterface::(int input_trigger_index)
{
        // Get trigger pin
        int trigger_pin = trigger_input_pin_list[input_trigger_index];
        if (trigger_pin > 0)
                return (trigger_input_state[trigger_pin]);
        else
                return (-1);
}

int LedArrayInterface::send_trigger_pulse(int trigger_index, uint16_t delay_us, bool inverse_polarity)
{
        // Get trigger pin
        int trigger_pin = trigger_output_pin_list[trigger_index];

        if (trigger_pin > 0)
        {
                // Write active state
                if (inverse_polarity)
                        digitalWriteFast(trigger_pin, LOW);
                else
                        digitalWriteFast(trigger_pin, HIGH);

                // Delay if desired
                if (delay_us > 0)
                        delayMicroseconds(delay_us);

                // Write normal state
                if (inverse_polarity)
                        digitalWriteFast(trigger_pin, HIGH);
                else
                        digitalWriteFast(trigger_pin, LOW);
                return (1);
        } else {
                return (-1);
        }
}

void LedArrayInterface::set_global_shutter_state(bool state)
{
    if (debug >= 1)
    {
        Serial.print("Setting Global Shutter state to ");
        Serial.print(state);
        Serial.print(SERIAL_LINE_ENDING);
    }

    // Store current state
    global_shutter_state = state;

    // Call the internal update method
    update();
}

bool LedArrayInterface::get_global_shutter_state()
{
    if (debug >= 1)
    {
        Serial.print("Getting Global Shutter state: ");
        Serial.print(global_shutter_state);
        Serial.print(SERIAL_LINE_ENDING);
    }
    
    return global_shutter_state;
}


void LedArrayInterface::update()
{
    if (global_shutter_state)
        tlc.update();
    else
        tlc.set_all(0);
}

void LedArrayInterface::clear()
{
        tlc.set_all(0);
}

void LedArrayInterface::set_channel(int16_t channel_number, int16_t color_channel_number, uint16_t value)
{
    if (debug >= 2)
    {
        Serial.print(F("Drawing channel #"));
        Serial.print(channel_number);
        Serial.print(F(", color_channel #"));
        Serial.print(color_channel_number);
        Serial.print(F(" to value "));
        Serial.print(value);
        Serial.print(SERIAL_LINE_ENDING);
    }

    if (channel_number >= 0)
    {
        if (color_channel_number < 0)
            tlc.set_single(channel_number, value);
        else 
            tlc.set_single_rgb(channel_number, color_channel_number, value);
    }
    else
    {
            Serial.print(F("Error (LedArrayInterface::set_channel): Invalid channel ("));
            Serial.print(channel_number);
            Serial.printf(F(")%s"), SERIAL_LINE_ENDING);
    }
}

void LedArrayInterface::set_channel(int16_t channel_number, int16_t color_channel_number, uint8_t value)
{
    set_channel(channel_number, color_channel_number, (uint16_t) (value * UINT16_MAX / UINT8_MAX));
}

void LedArrayInterface::set_channel(int16_t channel_number, int16_t color_channel_number, bool value)
{
    set_channel(channel_number, color_channel_number, (uint16_t) (value > 0 * UINT16_MAX));
}

void LedArrayInterface::set_led(int16_t led_number, int16_t color_channel_number, uint16_t value)
{
        if (debug >= 2)
        {
                Serial.print("U16 Setting led #");
                Serial.print(led_number);
                Serial.print(", color channel #");
                Serial.print(color_channel_number);
                Serial.print(" to value ");
                Serial.print(value);
                Serial.print(SERIAL_LINE_ENDING);
        }
        if (led_number < 0)
        {
            for (uint16_t led_index = 0; led_index < led_count; led_index++)
            {
                    int16_t channel_number = (int16_t)pgm_read_word(&(led_positions[led_index][1]));
                    set_channel(channel_number, color_channel_number, value);
            }
        }
        else
        {
            int16_t channel_number = (int16_t)pgm_read_word(&(led_positions[led_number][1]));
            set_channel(channel_number, color_channel_number, value);
        }
}



void LedArrayInterface::set_led(int16_t led_number, int16_t color_channel_number, uint8_t value)
{
        if (debug >= 2)
        {
                Serial.print("U8 Setting led #");
                Serial.print(led_number);
                Serial.print(", color channel #");
                Serial.print(color_channel_number);
                Serial.print(SERIAL_LINE_ENDING);
        }
        set_led(led_number, color_channel_number, (uint16_t) (value * UINT16_MAX / UINT8_MAX));
}

void LedArrayInterface::set_led(int16_t led_number, int16_t color_channel_number, bool value)
{
        if (debug >= 2)
        {
                Serial.print("B Setting led #");
                Serial.print(led_number);
                Serial.print(", color channel #");
                Serial.print(color_channel_number);
                Serial.print(SERIAL_LINE_ENDING);
        }
        set_led(led_number, color_channel_number, (uint16_t) (value * UINT16_MAX));
}

int8_t LedArrayInterface::device_reset()
{
  return device_setup();
}

int8_t LedArrayInterface::device_setup()
{
        // Initialize TLC5955
        tlc.init(LAT, SPI_MOSI, SPI_CLK, GSCLK);

        // We must set dot correction values, so set them all to the brightest adjustment
        tlc.set_all_dc_data(127);

        // Set Max Current Values (see TLC5955 datasheet)
        tlc.set_max_current(3, 3, 3); // Go up to 7

        // Set Function Control Data Latch values. See the TLC5955 Datasheet for the purpose of this latch.
        // DSPRPT, TMGRST, RFRESH, ESPWM, LSDVLT
        tlc.set_function_data(true, true, true, true, true);

        // Set all LED current levels to max (127)
        int currentR = 127;
        int currentB = 127;
        int currentG = 127;
        tlc.set_brightness_current(currentR, currentB, currentG);

        // Update vontrol register
        tlc.update_control();
        clear();
        tlc.update_control();

        // Set RGB pin order
        tlc.set_rgb_pin_order(0, 1, 2);

        // Update the GS register
        clear();

        // Output trigger Pins
        for (int trigger_index = 0; trigger_index < trigger_output_count; trigger_index++)
        {
                pinMode(trigger_output_pin_list[trigger_index], OUTPUT);
                digitalWriteFast(trigger_output_pin_list[trigger_index], LOW);
        }
        
        // Input trigger pins
        attachInterrupt(digitalPinToInterrupt(trigger_input_pin_list[0]), trigger_pin_interrupt_0, CHANGE);
        attachInterrupt(digitalPinToInterrupt(trigger_input_pin_list[1]), trigger_pin_interrupt_1, CHANGE);

        return NO_ERROR;
}

void LedArrayInterface::trigger_pin_interrupt_0()
{
        bool previous_state = trigger_input_state[0];
        trigger_input_state[0] = digitalReadFast(trigger_input_pin_list[0]);
        bool new_state = trigger_input_state[0];
        if (debug >= 2)
            Serial.printf("Recieved trigger pulse on pin 0. Previous state: %s New state: %s%s", previous_state ? "HIGH" : "LOW", new_state ? "HIGH" : "LOW", SERIAL_LINE_ENDING);
}

void LedArrayInterface::trigger_pin_interrupt_1()
{
    bool previous_state = trigger_input_state[1];
    trigger_input_state[1] = digitalReadFast(trigger_input_pin_list[1]);
    bool new_state = trigger_input_state[1];
    if (debug >= 2)
        Serial.printf("Recieved trigger pulse on pin 1. Previous state: %s New state: %s%s", previous_state ? "HIGH" : "LOW", new_state ? "HIGH" : "LOW", SERIAL_LINE_ENDING);
}

void LedArrayInterface::source_change_interrupt()
{
        Serial.printf(F("ERROR (LedArrayInterface::source_change_interrupt): PSU Monitoring not supported on this device."), SERIAL_LINE_ENDING);
}

float LedArrayInterface::get_power_source_voltage()
{
    return -1.0;
}

bool LedArrayInterface::get_power_source_monitoring_state()
{
  return false;
}

int16_t LedArrayInterface::get_device_power_sensing_capability()
{
      return NO_PSU_SENSING;
}

void LedArrayInterface::set_power_source_monitoring_state(int new_state)
{
        Serial.printf(F("ERROR (LedArrayInterface::set_power_source_monitoring_state): PSU Monitoring not supported on this device."), SERIAL_LINE_ENDING);
}

bool LedArrayInterface::is_power_source_plugged_in()
{
  return true;
}

uint8_t LedArrayInterface::get_device_command_count()
{
  return (LedArrayInterface::device_command_count);
}

const char * LedArrayInterface::get_device_command_name_short(int device_command_index)
{
        if ((device_command_index >= 0) && (device_command_index < LedArrayInterface::device_command_count))
                return (LedArrayInterface::device_commandNamesShort[device_command_index]);
        else
        {
                Serial.printf(F("ERROR (LedArrayInterface::get_device_command_led_list_size): Invalid device command index (%d)"), device_command_index, SERIAL_LINE_ENDING);
                return ("");
        }
}

const char * LedArrayInterface::get_device_command_name_long(int device_command_index)
{
        if ((device_command_index >= 0) && (device_command_index < LedArrayInterface::device_command_count))
                return (LedArrayInterface::device_commandNamesLong[device_command_index]);
        else
        {
                Serial.printf(F("ERROR (LedArrayInterface::get_device_command_led_list_size): Invalid device command index (%d)"), device_command_index, SERIAL_LINE_ENDING);
                return ("");
        }
}

uint32_t LedArrayInterface::get_device_command_led_list_size(int device_command_index)
{
        if ((device_command_index >= 0) && (device_command_index < LedArrayInterface::device_command_count))
        {
                // Get stored pattern cound and led per pattern for this command
                uint16_t pattern_count = LedArrayInterface::device_command_pattern_dimensions[device_command_index][0];
                uint16_t leds_per_pattern = LedArrayInterface::device_command_pattern_dimensions[device_command_index][1];

                // Concatenate these two into 32-bit unsigned integer
                uint32_t concatenated = ((uint32_t)pattern_count) << 16 | leds_per_pattern;
                return (concatenated);
        }
        else
        {
                Serial.printf(F("ERROR (LedArrayInterface::get_device_command_led_list_size): Invalid device command index (%d)"), device_command_index, SERIAL_LINE_ENDING);
                return (0);
        }
}

uint16_t LedArrayInterface::get_device_command_led_list_element(int device_command_index, uint16_t pattern_index, uint16_t led_index)
{
        if ((device_command_index >= 0) && (device_command_index < LedArrayInterface::device_command_count))
        {
                uint32_t concatenated = get_device_command_led_list_size(device_command_index);
                uint16_t pattern_count  = (uint16_t)(concatenated >> 16);
                uint16_t leds_per_pattern = (uint16_t)concatenated;

                if ((pattern_index < pattern_count) && (led_index < leds_per_pattern))
                {
                     if (device_command_index == 0)
                       return (uint16_t)pgm_read_word(&(center_led_list[pattern_index][led_index]));
                     else
                       return 0;

                }
                else
                {
                        Serial.printf(F("ERROR (LedArrayInterface::get_device_command_led_list_size): Invalid pattern index (%d) / led index (%d)"), pattern_index, led_index, SERIAL_LINE_ENDING);
                        return (0);
                }
        }
        else
        {
                Serial.printf(F("ERROR (LedArrayInterface::get_device_command_led_list_size): Invalid device command index (%d)"), device_command_index, SERIAL_LINE_ENDING);
                return (0);
        }
}

void LedArrayInterface::set_gsclk_frequency(uint32_t gsclk_frequency)
{
  tlc.set_gsclk_frequency(gsclk_frequency);
}

uint32_t LedArrayInterface::get_gsclk_frequency()
{
  return tlc.get_gsclk_frequency();
}

void LedArrayInterface::set_sclk_baud_rate(uint32_t new_baud_rate)
{
    tlc.set_sclk_frequency(new_baud_rate);
}

uint32_t LedArrayInterface::get_sclk_baud_rate()
{
  return tlc.get_sclk_frequency();
}

int8_t LedArrayInterface::set_register(uint32_t address, int8_t value)
{
    EEPROM.write(address, value);
    return NO_ERROR;
}

int8_t LedArrayInterface::get_register(uint32_t address)
{
    return EEPROM.read(address);
}


#endif
